/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { getDashboardMetrics } from "../funcs/getDashboardMetrics.js";
import { getHealth } from "../funcs/getHealth.js";
import { getLedgerPending } from "../funcs/getLedgerPending.js";
import { getTransactions } from "../funcs/getTransactions.js";
import { postLedgerSettle } from "../funcs/postLedgerSettle.js";
import { postSimulatorStart } from "../funcs/postSimulatorStart.js";
import { postWebhook } from "../funcs/postWebhook.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Rails extends ClientSDK {
  /**
   * Receive a transaction webhook
   */
  async postWebhook(
    request: models.Transaction,
    options?: RequestOptions,
  ): Promise<operations.PostWebhookResponse> {
    return unwrapAsync(postWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Get pending transactions
   */
  async getLedgerPending(
    options?: RequestOptions,
  ): Promise<operations.GetLedgerPendingResponse> {
    return unwrapAsync(getLedgerPending(
      this,
      options,
    ));
  }

  /**
   * Settle pending transactions
   */
  async postLedgerSettle(
    options?: RequestOptions,
  ): Promise<operations.PostLedgerSettleResponse> {
    return unwrapAsync(postLedgerSettle(
      this,
      options,
    ));
  }

  /**
   * Get transactions with filters and summary
   */
  async getTransactions(
    request?: operations.GetTransactionsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetTransactionsResponse> {
    return unwrapAsync(getTransactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Start transaction simulation
   */
  async postSimulatorStart(
    request: operations.PostSimulatorStartRequest,
    options?: RequestOptions,
  ): Promise<operations.PostSimulatorStartResponse> {
    return unwrapAsync(postSimulatorStart(
      this,
      request,
      options,
    ));
  }

  /**
   * Get dashboard metrics
   */
  async getDashboardMetrics(
    options?: RequestOptions,
  ): Promise<operations.GetDashboardMetricsResponse> {
    return unwrapAsync(getDashboardMetrics(
      this,
      options,
    ));
  }

  /**
   * Health check
   */
  async getHealth(
    options?: RequestOptions,
  ): Promise<operations.GetHealthResponse> {
    return unwrapAsync(getHealth(
      this,
      options,
    ));
  }
}
