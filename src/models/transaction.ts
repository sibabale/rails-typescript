/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Transaction = {
  txnRef?: string | undefined;
  senderAccount?: string | undefined;
  receiverAccount?: string | undefined;
  senderBank?: string | undefined;
  receiverBank?: string | undefined;
  amount?: number | undefined;
  currency?: string | undefined;
  timestamp?: Date | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: string | undefined;
  settled?: boolean | undefined;
};

/** @internal */
export const Transaction$inboundSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  txn_ref: z.string().optional(),
  sender_account: z.string().optional(),
  receiver_account: z.string().optional(),
  sender_bank: z.string().optional(),
  receiver_bank: z.string().optional(),
  amount: z.number().optional(),
  currency: z.string().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  metadata: z.record(z.any()).optional(),
  status: z.string().optional(),
  settled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "txn_ref": "txnRef",
    "sender_account": "senderAccount",
    "receiver_account": "receiverAccount",
    "sender_bank": "senderBank",
    "receiver_bank": "receiverBank",
  });
});

/** @internal */
export type Transaction$Outbound = {
  txn_ref?: string | undefined;
  sender_account?: string | undefined;
  receiver_account?: string | undefined;
  sender_bank?: string | undefined;
  receiver_bank?: string | undefined;
  amount?: number | undefined;
  currency?: string | undefined;
  timestamp?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: string | undefined;
  settled?: boolean | undefined;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
  Transaction$Outbound,
  z.ZodTypeDef,
  Transaction
> = z.object({
  txnRef: z.string().optional(),
  senderAccount: z.string().optional(),
  receiverAccount: z.string().optional(),
  senderBank: z.string().optional(),
  receiverBank: z.string().optional(),
  amount: z.number().optional(),
  currency: z.string().optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.record(z.any()).optional(),
  status: z.string().optional(),
  settled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    txnRef: "txn_ref",
    senderAccount: "sender_account",
    receiverAccount: "receiver_account",
    senderBank: "sender_bank",
    receiverBank: "receiver_bank",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
  /** @deprecated use `Transaction$inboundSchema` instead. */
  export const inboundSchema = Transaction$inboundSchema;
  /** @deprecated use `Transaction$outboundSchema` instead. */
  export const outboundSchema = Transaction$outboundSchema;
  /** @deprecated use `Transaction$Outbound` instead. */
  export type Outbound = Transaction$Outbound;
}

export function transactionToJSON(transaction: Transaction): string {
  return JSON.stringify(Transaction$outboundSchema.parse(transaction));
}

export function transactionFromJSON(
  jsonString: string,
): SafeParseResult<Transaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transaction' from JSON`,
  );
}
