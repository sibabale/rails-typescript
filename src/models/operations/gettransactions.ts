/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetTransactionsRequest = {
  page?: number | undefined;
  pageSize?: number | undefined;
};

export type Pagination = {
  page?: number | undefined;
  pageSize?: number | undefined;
  totalPages?: number | undefined;
};

/**
 * Transactions and summary
 */
export type GetTransactionsResponse = {
  transactions?: Array<models.Transaction> | undefined;
  pagination?: Pagination | undefined;
};

/** @internal */
export const GetTransactionsRequest$inboundSchema: z.ZodType<
  GetTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
});

/** @internal */
export type GetTransactionsRequest$Outbound = {
  page?: number | undefined;
  pageSize?: number | undefined;
};

/** @internal */
export const GetTransactionsRequest$outboundSchema: z.ZodType<
  GetTransactionsRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionsRequest
> = z.object({
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsRequest$ {
  /** @deprecated use `GetTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsRequest$inboundSchema;
  /** @deprecated use `GetTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsRequest$outboundSchema;
  /** @deprecated use `GetTransactionsRequest$Outbound` instead. */
  export type Outbound = GetTransactionsRequest$Outbound;
}

export function getTransactionsRequestToJSON(
  getTransactionsRequest: GetTransactionsRequest,
): string {
  return JSON.stringify(
    GetTransactionsRequest$outboundSchema.parse(getTransactionsRequest),
  );
}

export function getTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const Pagination$inboundSchema: z.ZodType<
  Pagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  totalPages: z.number().int().optional(),
});

/** @internal */
export type Pagination$Outbound = {
  page?: number | undefined;
  pageSize?: number | undefined;
  totalPages?: number | undefined;
};

/** @internal */
export const Pagination$outboundSchema: z.ZodType<
  Pagination$Outbound,
  z.ZodTypeDef,
  Pagination
> = z.object({
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  totalPages: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pagination$ {
  /** @deprecated use `Pagination$inboundSchema` instead. */
  export const inboundSchema = Pagination$inboundSchema;
  /** @deprecated use `Pagination$outboundSchema` instead. */
  export const outboundSchema = Pagination$outboundSchema;
  /** @deprecated use `Pagination$Outbound` instead. */
  export type Outbound = Pagination$Outbound;
}

export function paginationToJSON(pagination: Pagination): string {
  return JSON.stringify(Pagination$outboundSchema.parse(pagination));
}

export function paginationFromJSON(
  jsonString: string,
): SafeParseResult<Pagination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pagination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pagination' from JSON`,
  );
}

/** @internal */
export const GetTransactionsResponse$inboundSchema: z.ZodType<
  GetTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  transactions: z.array(models.Transaction$inboundSchema).optional(),
  pagination: z.lazy(() => Pagination$inboundSchema).optional(),
});

/** @internal */
export type GetTransactionsResponse$Outbound = {
  transactions?: Array<models.Transaction$Outbound> | undefined;
  pagination?: Pagination$Outbound | undefined;
};

/** @internal */
export const GetTransactionsResponse$outboundSchema: z.ZodType<
  GetTransactionsResponse$Outbound,
  z.ZodTypeDef,
  GetTransactionsResponse
> = z.object({
  transactions: z.array(models.Transaction$outboundSchema).optional(),
  pagination: z.lazy(() => Pagination$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsResponse$ {
  /** @deprecated use `GetTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsResponse$inboundSchema;
  /** @deprecated use `GetTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsResponse$outboundSchema;
  /** @deprecated use `GetTransactionsResponse$Outbound` instead. */
  export type Outbound = GetTransactionsResponse$Outbound;
}

export function getTransactionsResponseToJSON(
  getTransactionsResponse: GetTransactionsResponse,
): string {
  return JSON.stringify(
    GetTransactionsResponse$outboundSchema.parse(getTransactionsResponse),
  );
}

export function getTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsResponse' from JSON`,
  );
}
