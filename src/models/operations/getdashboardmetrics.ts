/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type TransactionLog = {};

export type ActiveBanksList = {};

export type BankDistribution = {};

export type SettlementOverview = {};

export type MondayClearingPreparation = {};

/**
 * Dashboard metrics
 */
export type GetDashboardMetricsResponse = {
  activeBanks?: number | undefined;
  totalRevenue?: number | undefined;
  completionRate?: number | undefined;
  revenueOverview?: Array<number> | undefined;
  transactionLogs?: Array<TransactionLog> | undefined;
  activeBanksList?: Array<ActiveBanksList> | undefined;
  bankDistributions?: Array<BankDistribution> | undefined;
  activeTransactions?: Array<models.Transaction> | undefined;
  settlementOverview?: SettlementOverview | undefined;
  mondayClearingPreparation?: MondayClearingPreparation | undefined;
};

/** @internal */
export const TransactionLog$inboundSchema: z.ZodType<
  TransactionLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionLog$Outbound = {};

/** @internal */
export const TransactionLog$outboundSchema: z.ZodType<
  TransactionLog$Outbound,
  z.ZodTypeDef,
  TransactionLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionLog$ {
  /** @deprecated use `TransactionLog$inboundSchema` instead. */
  export const inboundSchema = TransactionLog$inboundSchema;
  /** @deprecated use `TransactionLog$outboundSchema` instead. */
  export const outboundSchema = TransactionLog$outboundSchema;
  /** @deprecated use `TransactionLog$Outbound` instead. */
  export type Outbound = TransactionLog$Outbound;
}

export function transactionLogToJSON(transactionLog: TransactionLog): string {
  return JSON.stringify(TransactionLog$outboundSchema.parse(transactionLog));
}

export function transactionLogFromJSON(
  jsonString: string,
): SafeParseResult<TransactionLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionLog' from JSON`,
  );
}

/** @internal */
export const ActiveBanksList$inboundSchema: z.ZodType<
  ActiveBanksList,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActiveBanksList$Outbound = {};

/** @internal */
export const ActiveBanksList$outboundSchema: z.ZodType<
  ActiveBanksList$Outbound,
  z.ZodTypeDef,
  ActiveBanksList
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActiveBanksList$ {
  /** @deprecated use `ActiveBanksList$inboundSchema` instead. */
  export const inboundSchema = ActiveBanksList$inboundSchema;
  /** @deprecated use `ActiveBanksList$outboundSchema` instead. */
  export const outboundSchema = ActiveBanksList$outboundSchema;
  /** @deprecated use `ActiveBanksList$Outbound` instead. */
  export type Outbound = ActiveBanksList$Outbound;
}

export function activeBanksListToJSON(
  activeBanksList: ActiveBanksList,
): string {
  return JSON.stringify(ActiveBanksList$outboundSchema.parse(activeBanksList));
}

export function activeBanksListFromJSON(
  jsonString: string,
): SafeParseResult<ActiveBanksList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActiveBanksList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActiveBanksList' from JSON`,
  );
}

/** @internal */
export const BankDistribution$inboundSchema: z.ZodType<
  BankDistribution,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BankDistribution$Outbound = {};

/** @internal */
export const BankDistribution$outboundSchema: z.ZodType<
  BankDistribution$Outbound,
  z.ZodTypeDef,
  BankDistribution
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankDistribution$ {
  /** @deprecated use `BankDistribution$inboundSchema` instead. */
  export const inboundSchema = BankDistribution$inboundSchema;
  /** @deprecated use `BankDistribution$outboundSchema` instead. */
  export const outboundSchema = BankDistribution$outboundSchema;
  /** @deprecated use `BankDistribution$Outbound` instead. */
  export type Outbound = BankDistribution$Outbound;
}

export function bankDistributionToJSON(
  bankDistribution: BankDistribution,
): string {
  return JSON.stringify(
    BankDistribution$outboundSchema.parse(bankDistribution),
  );
}

export function bankDistributionFromJSON(
  jsonString: string,
): SafeParseResult<BankDistribution, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankDistribution$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankDistribution' from JSON`,
  );
}

/** @internal */
export const SettlementOverview$inboundSchema: z.ZodType<
  SettlementOverview,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SettlementOverview$Outbound = {};

/** @internal */
export const SettlementOverview$outboundSchema: z.ZodType<
  SettlementOverview$Outbound,
  z.ZodTypeDef,
  SettlementOverview
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettlementOverview$ {
  /** @deprecated use `SettlementOverview$inboundSchema` instead. */
  export const inboundSchema = SettlementOverview$inboundSchema;
  /** @deprecated use `SettlementOverview$outboundSchema` instead. */
  export const outboundSchema = SettlementOverview$outboundSchema;
  /** @deprecated use `SettlementOverview$Outbound` instead. */
  export type Outbound = SettlementOverview$Outbound;
}

export function settlementOverviewToJSON(
  settlementOverview: SettlementOverview,
): string {
  return JSON.stringify(
    SettlementOverview$outboundSchema.parse(settlementOverview),
  );
}

export function settlementOverviewFromJSON(
  jsonString: string,
): SafeParseResult<SettlementOverview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SettlementOverview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SettlementOverview' from JSON`,
  );
}

/** @internal */
export const MondayClearingPreparation$inboundSchema: z.ZodType<
  MondayClearingPreparation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MondayClearingPreparation$Outbound = {};

/** @internal */
export const MondayClearingPreparation$outboundSchema: z.ZodType<
  MondayClearingPreparation$Outbound,
  z.ZodTypeDef,
  MondayClearingPreparation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MondayClearingPreparation$ {
  /** @deprecated use `MondayClearingPreparation$inboundSchema` instead. */
  export const inboundSchema = MondayClearingPreparation$inboundSchema;
  /** @deprecated use `MondayClearingPreparation$outboundSchema` instead. */
  export const outboundSchema = MondayClearingPreparation$outboundSchema;
  /** @deprecated use `MondayClearingPreparation$Outbound` instead. */
  export type Outbound = MondayClearingPreparation$Outbound;
}

export function mondayClearingPreparationToJSON(
  mondayClearingPreparation: MondayClearingPreparation,
): string {
  return JSON.stringify(
    MondayClearingPreparation$outboundSchema.parse(mondayClearingPreparation),
  );
}

export function mondayClearingPreparationFromJSON(
  jsonString: string,
): SafeParseResult<MondayClearingPreparation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MondayClearingPreparation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MondayClearingPreparation' from JSON`,
  );
}

/** @internal */
export const GetDashboardMetricsResponse$inboundSchema: z.ZodType<
  GetDashboardMetricsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  activeBanks: z.number().int().optional(),
  totalRevenue: z.number().optional(),
  completionRate: z.number().optional(),
  revenueOverview: z.array(z.number()).optional(),
  transactionLogs: z.array(z.lazy(() => TransactionLog$inboundSchema))
    .optional(),
  activeBanksList: z.array(z.lazy(() => ActiveBanksList$inboundSchema))
    .optional(),
  bankDistributions: z.array(z.lazy(() => BankDistribution$inboundSchema))
    .optional(),
  activeTransactions: z.array(models.Transaction$inboundSchema).optional(),
  settlementOverview: z.lazy(() => SettlementOverview$inboundSchema).optional(),
  mondayClearingPreparation: z.lazy(() =>
    MondayClearingPreparation$inboundSchema
  ).optional(),
});

/** @internal */
export type GetDashboardMetricsResponse$Outbound = {
  activeBanks?: number | undefined;
  totalRevenue?: number | undefined;
  completionRate?: number | undefined;
  revenueOverview?: Array<number> | undefined;
  transactionLogs?: Array<TransactionLog$Outbound> | undefined;
  activeBanksList?: Array<ActiveBanksList$Outbound> | undefined;
  bankDistributions?: Array<BankDistribution$Outbound> | undefined;
  activeTransactions?: Array<models.Transaction$Outbound> | undefined;
  settlementOverview?: SettlementOverview$Outbound | undefined;
  mondayClearingPreparation?: MondayClearingPreparation$Outbound | undefined;
};

/** @internal */
export const GetDashboardMetricsResponse$outboundSchema: z.ZodType<
  GetDashboardMetricsResponse$Outbound,
  z.ZodTypeDef,
  GetDashboardMetricsResponse
> = z.object({
  activeBanks: z.number().int().optional(),
  totalRevenue: z.number().optional(),
  completionRate: z.number().optional(),
  revenueOverview: z.array(z.number()).optional(),
  transactionLogs: z.array(z.lazy(() => TransactionLog$outboundSchema))
    .optional(),
  activeBanksList: z.array(z.lazy(() => ActiveBanksList$outboundSchema))
    .optional(),
  bankDistributions: z.array(z.lazy(() => BankDistribution$outboundSchema))
    .optional(),
  activeTransactions: z.array(models.Transaction$outboundSchema).optional(),
  settlementOverview: z.lazy(() => SettlementOverview$outboundSchema)
    .optional(),
  mondayClearingPreparation: z.lazy(() =>
    MondayClearingPreparation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDashboardMetricsResponse$ {
  /** @deprecated use `GetDashboardMetricsResponse$inboundSchema` instead. */
  export const inboundSchema = GetDashboardMetricsResponse$inboundSchema;
  /** @deprecated use `GetDashboardMetricsResponse$outboundSchema` instead. */
  export const outboundSchema = GetDashboardMetricsResponse$outboundSchema;
  /** @deprecated use `GetDashboardMetricsResponse$Outbound` instead. */
  export type Outbound = GetDashboardMetricsResponse$Outbound;
}

export function getDashboardMetricsResponseToJSON(
  getDashboardMetricsResponse: GetDashboardMetricsResponse,
): string {
  return JSON.stringify(
    GetDashboardMetricsResponse$outboundSchema.parse(
      getDashboardMetricsResponse,
    ),
  );
}

export function getDashboardMetricsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDashboardMetricsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDashboardMetricsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDashboardMetricsResponse' from JSON`,
  );
}
