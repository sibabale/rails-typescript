/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Transaction received
 */
export type PostWebhookResponse = {
  message?: string | undefined;
  txnRef?: string | undefined;
};

/** @internal */
export const PostWebhookResponse$inboundSchema: z.ZodType<
  PostWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  txn_ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "txn_ref": "txnRef",
  });
});

/** @internal */
export type PostWebhookResponse$Outbound = {
  message?: string | undefined;
  txn_ref?: string | undefined;
};

/** @internal */
export const PostWebhookResponse$outboundSchema: z.ZodType<
  PostWebhookResponse$Outbound,
  z.ZodTypeDef,
  PostWebhookResponse
> = z.object({
  message: z.string().optional(),
  txnRef: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    txnRef: "txn_ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostWebhookResponse$ {
  /** @deprecated use `PostWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = PostWebhookResponse$inboundSchema;
  /** @deprecated use `PostWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = PostWebhookResponse$outboundSchema;
  /** @deprecated use `PostWebhookResponse$Outbound` instead. */
  export type Outbound = PostWebhookResponse$Outbound;
}

export function postWebhookResponseToJSON(
  postWebhookResponse: PostWebhookResponse,
): string {
  return JSON.stringify(
    PostWebhookResponse$outboundSchema.parse(postWebhookResponse),
  );
}

export function postWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostWebhookResponse' from JSON`,
  );
}
