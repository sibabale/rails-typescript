/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * List of pending transactions
 */
export type GetLedgerPendingResponse = {
  pending?: Array<models.Transaction> | undefined;
};

/** @internal */
export const GetLedgerPendingResponse$inboundSchema: z.ZodType<
  GetLedgerPendingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  pending: z.array(models.Transaction$inboundSchema).optional(),
});

/** @internal */
export type GetLedgerPendingResponse$Outbound = {
  pending?: Array<models.Transaction$Outbound> | undefined;
};

/** @internal */
export const GetLedgerPendingResponse$outboundSchema: z.ZodType<
  GetLedgerPendingResponse$Outbound,
  z.ZodTypeDef,
  GetLedgerPendingResponse
> = z.object({
  pending: z.array(models.Transaction$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLedgerPendingResponse$ {
  /** @deprecated use `GetLedgerPendingResponse$inboundSchema` instead. */
  export const inboundSchema = GetLedgerPendingResponse$inboundSchema;
  /** @deprecated use `GetLedgerPendingResponse$outboundSchema` instead. */
  export const outboundSchema = GetLedgerPendingResponse$outboundSchema;
  /** @deprecated use `GetLedgerPendingResponse$Outbound` instead. */
  export type Outbound = GetLedgerPendingResponse$Outbound;
}

export function getLedgerPendingResponseToJSON(
  getLedgerPendingResponse: GetLedgerPendingResponse,
): string {
  return JSON.stringify(
    GetLedgerPendingResponse$outboundSchema.parse(getLedgerPendingResponse),
  );
}

export function getLedgerPendingResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetLedgerPendingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLedgerPendingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLedgerPendingResponse' from JSON`,
  );
}
