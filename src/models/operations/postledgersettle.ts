/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Settlement complete
 */
export type PostLedgerSettleResponse = {
  message?: string | undefined;
  settled?: Array<models.Transaction> | undefined;
};

/** @internal */
export const PostLedgerSettleResponse$inboundSchema: z.ZodType<
  PostLedgerSettleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  settled: z.array(models.Transaction$inboundSchema).optional(),
});

/** @internal */
export type PostLedgerSettleResponse$Outbound = {
  message?: string | undefined;
  settled?: Array<models.Transaction$Outbound> | undefined;
};

/** @internal */
export const PostLedgerSettleResponse$outboundSchema: z.ZodType<
  PostLedgerSettleResponse$Outbound,
  z.ZodTypeDef,
  PostLedgerSettleResponse
> = z.object({
  message: z.string().optional(),
  settled: z.array(models.Transaction$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostLedgerSettleResponse$ {
  /** @deprecated use `PostLedgerSettleResponse$inboundSchema` instead. */
  export const inboundSchema = PostLedgerSettleResponse$inboundSchema;
  /** @deprecated use `PostLedgerSettleResponse$outboundSchema` instead. */
  export const outboundSchema = PostLedgerSettleResponse$outboundSchema;
  /** @deprecated use `PostLedgerSettleResponse$Outbound` instead. */
  export type Outbound = PostLedgerSettleResponse$Outbound;
}

export function postLedgerSettleResponseToJSON(
  postLedgerSettleResponse: PostLedgerSettleResponse,
): string {
  return JSON.stringify(
    PostLedgerSettleResponse$outboundSchema.parse(postLedgerSettleResponse),
  );
}

export function postLedgerSettleResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostLedgerSettleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostLedgerSettleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostLedgerSettleResponse' from JSON`,
  );
}
